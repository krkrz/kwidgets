//
// $id: WidgetSample.tjs,v 1.10 2007/09/22 21:38:39 cvs Exp $
//

/*----------------------------------------------------------------------
 * タグテキストエディットサンプル
 ----------------------------------------------------------------------*/
class TagTextEdit extends KTagTextEdit
{
	// tagPat
	var tagStr;
	// valueプロパティを上書き
	var valueOld;

	// コンストラクタ
	function TagTextEdit {
		super.KTagTextEdit(...);

		// タグ文字の設定
		tagStr = "@";
		// valueプロパティをつけかえる
		valueOld = &value;
			&value = &valueNew;
	}

	// valueプロパティの置き換え
	property valueNew {
		setter(v) {
			// 値からタグを取り覗いてまず文字として設定
			valueOld = v.replace(new RegExp(tagStr, "g"), "");
			// 改行で分割して配列に格納
			var text = v.split(linefeedPat);
			// タグをあらわす正規表現
			var tagPat = new RegExp(tagStr);
			// 前から順に、タグを検出して挿入していく
			for (var row = 0; row < text.count; row++) {
				var str = text[row];
				var col = 0;
				while (tagPat.test(str)) {
					col += tagPat.index;
					str = tagPat.rightContext;
					insertTag(row, col, void, false);
				}
			}
		}

		getter {
			// テキストの値を改行で分割して配列に格納
			var text = valueOld.split(linefeedPat);
			// 後ろから順に、タグの位置に文字列を挿入
			for (var index = tagCount - 1; index >= 0; index--) {
				var tag = tagAt(index);
				text[tag.row] = text[tag.row].substr(0, tag.col) + tagStr + text[tag.row].substr(tag.col);
			}
			// 再びテキストをつなぎ合わせて返す
			return text.join("\r\n");
		}
	}

	// コンテキストメニューの拡張
	function buildContextMenu {
		var menu = super.buildContextMenu();
		menu.addSeparator();
		menu.addItem("タグを挿入する", "", ! isTagOnPointer, this.insertTagAtPointer);
		menu.addItem("タグを削除する", "", isTagOnPointer, this.deleteTagAtPointer);
		return menu;
	}

	// ポインタがタグをポイントした時に呼ばれる
	function onTagPointAt(index) {
		Debug.message("タグポイント", index);
	}

	// ポインタに比べて一番小さいタグ(カレントタグ)が変わった時に呼ばれる
	function onTagRegionAt(index) {
		Debug.message("タグリージョン", index);
	}

	// タグが挿入された時に呼ばれる
	function onTagInsertAt(index) {
		Debug.message("タグ挿入", index);
	}

	// タグが削除された時に呼ばれる
	function onTagDeleteAt(index) {
		Debug.message("タグ削除", index);
	}
}



/*----------------------------------------------------------------------
 * ウィジェットサンプル
 ----------------------------------------------------------------------*/
class WidgetSample extends KWindow
{
	// コンストラクタ
	function WidgetSample() {
		super.KWindow(%[ name: "widgetsample_window",
						 theme: "dialog",
						 style: %[
							 isClass: %[
								 KWidget: %[
									 align: ALIGN_CENTER
								 ]
							 ]
						 ]
					   ]);

		// ウィンドウ初期設定
		caption = 'ウィジェットサンプル';
		imeMode = imDontCare;
		borderStyle = bsSizeable;
		alwaysSetToMinSize = true;
//		borderStyle = bsSingle;
//		alwaysSetToMinSize = true;

		// ウィンドウ内のウィジェットの初期値を設定
//		defaultSpace = 4;
//		defaultMargin = 6;
//		defaultAlignHorizontal = ALIGN_CENTER;
//		defaultAlignVertical = ALIGN_CENTER;
//		defaultFocusable = true;

		// メニューを作成、配置
		menu.addItem("メニュー", "menuTop");
		menuTop.addItem("アクション1", "menuAction1");
		menuTop.addItem("アクション2", "menuAction2");
		menuTop.addSeparator();
		menuTop.addToggleItem("トグル1", false, "menuToggle1");
		menuTop.addToggleItem("トグル2", true, "menuToggle2");
		menuTop.addSeparator();
		menuTop.addItem("入れ子メニュー", "menuNest");
		menuNest.addRadioItem("ラジオその1", 1, "menuRadio");
		menuNest.addRadioItem("ラジオその2", 2, "menuRadio");
		menuNest.addRadioItem("ラジオその3", 3, "menuRadio");
		menuTop.addSeparator();
		menuTop.addItem("カスタムダイアログ", "customDialogTest");

		menu.addItem("ズーム", "zoomRoot");
		zoomRoot.addRadioItem("50%", 50, "zoom");
		zoomRoot.addRadioItem("60%", 60, "zoom");
		zoomRoot.addRadioItem("70%", 70, "zoom");
		zoomRoot.addRadioItem("80%", 80, "zoom");
		zoomRoot.addRadioItem("90%", 90, "zoom");
		zoomRoot.addRadioItem("100%", 100, "zoom");
		zoomRoot.addRadioItem("110%", 110, "zoom");
		zoomRoot.addRadioItem("120%", 120, "zoom");
		zoomRoot.addRadioItem("130%", 130, "zoom");
		zoomRoot.addRadioItem("140%", 140, "zoom");
		zoomRoot.addRadioItem("150%", 150, "zoom");
		zoom.value = 100;

		menuAction1.shortcut = "Ctrl+1";
		menuAction2.shortcut = "Ctrl+2";
		menuToggle1.shortcut = "Ctrl+3";
		menuToggle2.shortcut = "Ctrl+4";

		// ウィジェットを作成、配置
		var tabs, tabGrid, widgetFrame, widgetGrid, scroll, colorGrid;

		tabs = new KTabLayout(this, %[ name: "tabs",
									   tabWrapping: true ]);

//		tabs = new KTabLayout(this, FRAME_RAISED, "tabs");

		// ボタンのサンプル
		tabGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetFrame = new KFrameLayout(this, %[ label: "ノーマルボタン", name: "normalButtonFrame", id: "group_frame" ]);
		widgetGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetGrid.add(0, 0, new KTextButton(this, "ボタン", "textbutton"));
		widgetGrid.add(1, 0, new KImageButton(this, "gotta_mail", "imagebutton"));
		widgetFrame.add(widgetGrid);
		tabGrid.add(0, 0, widgetFrame);
		widgetFrame = new KFrameLayout(this, %[ label: "トグルボタン", id: "group_frame" ]);
		widgetGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetGrid.add(0, 0, new KTextToggleButton(this, "ボタン", "texttogglebutton"));
		widgetGrid.add(1, 0, new KImageToggleButton(this, "gotta_mail", "imagetogglebutton"));
		widgetFrame.add(widgetGrid);
		tabGrid.add(0, 1, widgetFrame);

		tabs.add("ボタン", tabGrid);

		// ラジオボタンのサンプル
		tabGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetFrame = new KFrameLayout(this, %[ label: "ラジオボタン", id: "group_frame" ]);
		widgetGrid = new KRadioLayout(this, %[ name: "radio1", value: 3, id: "widget_grid" ]);
		widgetGrid.add(0, 0, new KRadioButton(this, %[ label: "項目1", choice: 1 ]));
		widgetGrid.add(1, 0, new KRadioButton(this, %[ label: "項目2", choice: 2 ]));
		widgetGrid.add(0, 1, new KRadioButton(this, %[ label: "項目3", choice: 3 ]));
		widgetGrid.add(1, 1, new KRadioButton(this, %[ label: "項目4", choice: 4 ]));
		widgetFrame.add(widgetGrid);
		tabGrid.add(0, 0, widgetFrame);
		widgetFrame = new KFrameLayout(this, %[ label: "異種混合", id: "group_frame" ]);
		widgetGrid = new KRadioLayout(this, %[ name: "radio2", id: "widget_grid" ]);
		widgetGrid.add(0, 0, new KRadioButton(this, %[ label: "項目1", choice: 1 ]));
		widgetGrid.add(1, 0, new KCheckBox(this, %[ label: "項目2", choice: 2 ]));
		widgetGrid.add(0, 1, new KTextToggleButton(this, %[ label: "項目3", choice: 3 ]));
		widgetGrid.add(1, 1, new KImageToggleButton(this, %[ icon: "gotta_mail", choice: 4 ]));
		widgetFrame.add(widgetGrid);
		tabGrid.add(0, 1, widgetFrame);

		tabs.add("ラジオボタン", tabGrid);

		// スライダーのサンプル
		tabGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetFrame = new KFrameLayout(this, %[ label: "スライダー", id: "group_frame" ]);
		widgetGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetGrid.add(0, 0, new KTextLabel(this, "0〜100"));
		widgetGrid.add(1, 0, new KSlider(this, SLIDER_ADAPTIVE_WIDTH, 20, 0, 100, 1, "slider1"));
		widgetGrid.add(0, 1, new KTextLabel(this, "-1000〜1000"));
		widgetGrid.add(1, 1, new KSlider(this, 200, 20, -1000, 1000, 1, "slider2"));
		widgetGrid.add(0, 2, new KTextLabel(this, "24〜34"));
		widgetGrid.add(1, 2, new KSlider(this, 200, 20, 24, 34, 1, "slider3"));
		widgetFrame.add(widgetGrid);
		tabGrid.add(0, 0, widgetFrame);
		widgetFrame = new KFrameLayout(this, %[ label: "テキストスライダー", id: "group_frame" ]);
		widgetGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetGrid.add(0, 0, new KTextLabel(this, "0〜10(0.1刻み)"));
		widgetGrid.add(1, 0, new KTextInputSlider(this, %[ left: 0, right: 10, stride: 0.1, name: "textinputslider" ]));
		widgetFrame.add(widgetGrid);
		tabGrid.add(0, 1, widgetFrame);

		tabs.add("スライダー", tabGrid);

		// コンボボックスのサンプル
		tabGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetFrame = new KFrameLayout(this, %[ label: "コンボボックス", id: "group_frame" ]);
		widgetGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetGrid.add(0, 0, new KComboBox(this, %[ width: 200, type: COMBO_STYLE_DROPDOWN, name: "combobox1" ]));
		widgetGrid.add(0, 1, new KComboBox(this, %[ width: 200, type: COMBO_STYLE_DROPDOWNLIST, name: "combobox2" ]));
		widgetFrame.add(widgetGrid);
		tabGrid.add(0, 0, widgetFrame);

		tabs.add("コンボボックス", tabGrid);

		// テキスト入力のサンプル
		tabGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetFrame = new KFrameLayout(this, %[ label: "テキストインプット", id: "group_frame" ]);
		widgetGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetGrid.add(0, 0, new KTextLabel(this, "英数字のみ"));
		widgetGrid.add(1, 0, new KTextInput(this, %[ width: 100, type: TEXT_SYMBOL, name: "textinput1" ]));
		widgetGrid.add(0, 1, new KTextLabel(this, "整数のみ"));
		widgetGrid.add(1, 1, new KTextInput(this, %[ width: 100, type: TEXT_DIGIT, name: "textinput2" ]));
		widgetGrid.add(0, 2, new KTextLabel(this, "少数のみ"));
		widgetGrid.add(1, 2, new KTextInput(this, %[ width: 100, type: TEXT_REAL, name: "textinput3" ]));
		widgetGrid.add(0, 3, new KTextLabel(this, "なんでも"));
		widgetGrid.add(1, 3, new KTextInput(this, %[ width: 100, type: TEXT_ANY, name: "textinput4" ]));
		widgetFrame.add(widgetGrid);
		tabGrid.add(0, 0, widgetFrame, 2);
		widgetFrame = new KFrameLayout(this, %[ label: "テキストエディット", id: "group_frame" ]);
		widgetGrid = new KGridLayout(this, %[ id: "widget_grid" ]);
		widgetGrid.margin = 0;
		var radioGrid = new KRadioLayout(this, %[ name: "textedit_keybind", id: "widget_grid" ]);
		radioGrid.add(0, 0, new KCheckBox(this, "WINバインド", "windows_bind"));
		radioGrid.add(1, 0, new KCheckBox(this, "emacsバインド", "emacs_bind"));
		radioGrid.onValueModified = function(value) {
			switch (value) {
			case "windows_bind": window.textedit.bindWindowsKeyMap(); break;
			case "emacs_bind":   window.textedit.bindEmacsKeyMap();   break;
			}
		} incontextof(radioGrid);
		widgetGrid.add(0, 0, radioGrid);
		scroll = new KScrollLayout(this, %[ horizontal: false, vertical: true, name: "textscroll", id: "focusable_frame" ]);
		scroll.add(new TagTextEdit(this, %[ name: "textedit" ]));
		scroll.textedit.margin = 0;
		widgetGrid.add(0, 1, scroll);
		widgetFrame.add(widgetGrid);
		tabGrid.add(0, 1, widgetFrame);
		widgetFrame = new KFrameLayout(this, %[ label: "テキストボード", id: "group_frame" ]);
		scroll = new KScrollLayout(this, %[ horizontal: true, vertical: true, id: "focusable_frame" ]);
		scroll.add(new KTextBoard(this, "textboard"));
		scroll.textboard.margin = 0;
		widgetFrame.add(scroll);
		tabGrid.add(1, 1, widgetFrame);

		tabs.add("テキスト", tabGrid);

		// カラーボックスのサンプル
		tabGrid = new KGridLayout(this, %[ id: "widget_grid",
										   style: %[
											   isClass: %[
												   KColorBox: %[
													   borderWidth: 1,
													   borderColor: 0xffacacac,
													   borderStyle: BORDER_STYLE_SOLID,
													   borderRadius: 3,
													   padding: 1,
												   ],
											   ]
										   ]
										 ]);
		widgetFrame = new KFrameLayout(this, %[ label: "カラー(α無し)", id: "group_frame" ]);
		colorGrid = new KGridLayout(this, %[ style: %[ space: 5 ] ]);
		for (var y = 0; y < 5; y++)
			for (var x = 0; x < 10; x++) {
				var colorBox = new KColorBox(this, %[ width: 20, height: 20, name: "color" + x + y ]);
				var rgb = Layer.HSV2RGB(x * 360 / 10, y * 100 / 4, 100);
				colorBox.value = (rgb.r << 16) | (rgb.g << 8) | (rgb.b);
				colorBox.margin = 0;
				colorGrid.add(x, y, colorBox);
			}
		widgetFrame.add(colorGrid);
		tabGrid.add(0, 0, widgetFrame);
		widgetFrame = new KFrameLayout(this, %[ label: "カラー(α有り)", id: "group_frame" ]);
		colorGrid = new KGridLayout(this, %[ style: %[ space: 5 ] ]);
		for (var y = 0; y < 5; y++)
			for (var x = 0; x < 10; x++) {
				var colorBox = new KColorBox(this, %[ hasAlpha: true, width: 20, height: 20, name: "alpha" + x + y ]);
				var rgb = Layer.HSV2RGB(x * 360 / 10, y * 100 / 4, 100);
				colorBox.value = 0x80000000 | (rgb.r << 16) | (rgb.g << 8) | (rgb.b);
				colorBox.margin = 0;
				colorGrid.add(x, y, colorBox);
			}
		widgetFrame.add(colorGrid);
		tabGrid.add(0, 1, widgetFrame);

		tabs.add("カラー", tabGrid);

		tabs.add("テストタブ", new KGridLayout(this, %[ name: "testGrid",
													style: %[
														isClass: %[
															KGridLayout: %[
																borderStyle: BORDER_STYLE_SOLID,
																borderColor: 0xffff0000,
																borderWidth: 1,
																padding: 1
															]
														]
													]
												  ]));
		tabs.testGrid.add(0, 0, new KFrameLayout(this, %[ name: "testFrame", label: "テストフレーム", helpText: "ここにヘルプを表示", checkable: true  ]));
		tabs.testFrame.add(new KGridLayout(this, %[ name: "testInnerGrid" ]));
		tabs.testInnerGrid.add(0, 0, new KTextButton(this, %[ name: "testButton", label: "ボタン" ]));
		tabs.testInnerGrid.add(0, 1, new KVerticalSeparator(this));
		tabs.testInnerGrid.add(1, 0, new KHorizontalSeparator(this));

		var rootGrid = new KGridLayout(this, %[ id: "widget_grid_narrow" ]);
		rootGrid.add(0, 0, tabs);
		rootGrid.add(0, 1, new KVerticalSeparator(this));
		rootGrid.add(0, 2, new KStatusBar(this));

		// プライマリウィジェットにタブを登録
		primaryWidget.add(rootGrid);

		// ウィジェットの初期設定
		// 値持ちウィジェットは登録した名前で直接参照できる
		radio1.value = 1;
		radio2.value = 1;
		textedit.respondToValueModification = true;
		textedit_keybind.value = "windows_bind";
		textedit_keybind.windows_bind.focusable = false;
		textedit_keybind.emacs_bind.focusable = false;

		combobox1.add("ドロップダウンコンボのいち", "combo11");
		combobox1.add("ドロップダウンコンボのに",   "combo12");
		combobox1.add("ドロップダウンコンボのさん", "combo13");
		combobox1.add("ドロップダウンコンボのよん", "combo14");
		combobox1.add("ドロップダウンコンボのご",   "combo15");
		combobox1.caption = "ドロップダウンコンボ入力";

		combobox2.add("ドロップダウンリストのいち", "combo21");
		combobox2.add("ドロップダウンリストのに",   "combo22");
		combobox2.add("ドロップダウンリストのさん", "combo23");
		combobox2.add("ドロップダウンリストのよん", "combo24");
		combobox2.add("ドロップダウンリストのご",   "combo25");
		combobox2.value = "combo22";

		// ステータスバーの設定
		statusBar.defaultLabel = "ステータスバー";
		textbutton.status = textbutton.hint = "テキストボタン";
		imagebutton.status = imagebutton.hint = "イメージボタン";
		texttogglebutton.status = texttogglebutton.hint = "テキストトグルボタン";
		imagetogglebutton.status = imagetogglebutton.hint = "イメージトグルボタン";
		radio1.status = "ラジオボタン1";
		radio2.status = "ラジオボタン2";
		slider1.status = "スライダー1";
		slider2.status = "スライダー2";
		slider3.status = "スライダー3";
		textinputslider.status = "テキストインプットスライダー";
		combobox1.status = "コンボボックス1";
		combobox2.status = "コンボボックス2";
		textinput1.status = "テキストインプット(英数字)";
		textinput2.status = "テキストインプット(整数のみ)";
		textinput3.status = "テキストインプット(少数のみ)";
		textinput4.status = "テキストインプット(なんでも)";
		textedit.status = "テキストエディット";
		textboard.status = "テキストボード";

		// ヘルプテキストの設定
		normalButtonFrame.helpText = "任意のヘルプメッセージを\nこの場所に表示出来ます";

		// 永続化辞書の作成
		var dict = new KPersistentDictionary(System.dataPath + "widgetsample_dict.txt");
		// ウィンドウの管理オブジェクトに辞書を追加して、
		// finalize時に自動的に内容がセーブされるようにする。
		add(dict);
		// ウィンドウ内の名前を持っているウィジェットと辞書をバインドする。
		// これにより、アプリ終了時のウィジェットの値が次回起動時に持ち越される。
		// ウィンドウ自身のサイズと座標も辞書に記録される。
		bindPersistentDictionary(dict);

		// テキストエディットのバインドの初期値を反映させる
		textedit_keybind.invalidateValue();
		// テキストボードにテキストエディットの値を反映
		textboard.value = textedit.value;

		// ズームの初期値を反映させる
		zoom.invalidateValue();
		// テストタブの有効かを反映
		tabs.tabAt(tabs.childCount - 1).select();
	}

	// ウィジェットの値が更新された時に呼ばれるフック関数
	function onChildValueModified(child, value) {
		switch (child.name) {
		default: {
			// 更新のあったウィジェットの名前と値を表示。
			Debug.message("child value modified", child.name, typeof(value), value);
			break;
		}
			// ズーム変更
		case "zoom":
			setZoom(value, 100);
			break;

			// プレーンダイアログテスト
		case "customDialogTest":
			queryCustomDialog(this, dict,
							  %[
								  name: "test_dialog",
								  caption: "Test Dialog",
								  widgetList: [ %[ name: "check", label: "チェックボックス", type: DIALOG_WIDGET_TYPE_CHECKBOX,  defaultValue: true ],
												%[ name: "int",   label: "整数入力",         type: DIALOG_WIDGET_TYPE_TEXTINPUT, textType: TEXT_DIGIT ],
												%[ name: "real",  label: "小数入力",         type: DIALOG_WIDGET_TYPE_TEXTINPUT, textType: TEXT_REAL, defaultValue: 0.5 ],
												%[ name: "str",   label: "文字入力",         type: DIALOG_WIDGET_TYPE_TEXTINPUT, textType: TEXT_ANY ],
												%[ name: "text",  label: "テキスト",         type: DIALOG_WIDGET_TYPE_TEXTAREA,   defaultValue: "ほげ\nもげ" ],
												%[ name: "list",  label: "リスト",           type: DIALOG_WIDGET_TYPE_DROPDOWNLIST, listItems: [ "項目1", [ "項目2", 2 ], [ "項目3", 3 ] ], defaultValue: 2]
											  ]
							  ]);
			break;

		case "textedit":
			textboard.value = value;
			break;
		}
	}
};

//----------------------------------------------------------------------
// サンプル表示・非表示の切り替え
global.widgetSample = void;

function showWidgetSample
{
	if (widgetSample === void)
		widgetSample = new WidgetSample();
	widgetSample.visible = true;
}

function hideWidgetSample
{
	widgetSample.visible = false;
}
