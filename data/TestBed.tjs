class TestBed extends KWindow
{ 
	function TestBed {
		Debug.message("start test bed");
		
		super.KWindow(%[ name: "testbed",
						 caption: "テストベッド",
						 borderStyle: bsSizeable,
						 alwaysSetToMinSize: false,
//						 style: %[ isClass: %[ KGridLayout: %[ space: 10, margin: 10 ] ] ],
						 style: %[ isClass: %[ KWidget: %[ align: ALIGN_CENTER ] ] ],
						 theme: "dialog",
					   ]);

		var testTab = new KTabLayout(this, %[ name: "testTab" ]);
//		Debug.message("before attach to window");
//		primaryWidget.add(testTab);
//		Debug.message("after attach to window");

		with (testTab) {
				.add("カスタムUI", new KScrollLayout(this, %[ theme: "variable", vertical: true, horizontal: false, name: "customUIScroll" ]));
				.customUIScroll.add(new KList(this, %[ name: "customUIList" ]));
				.customUIList.add(new KListItem("とても長いリスト項目が全体のリストの幅をどのように規定するかをテストする"));
				.customUIList.add(new KListItem(%[ label: "UIテスト", name: "uiTest", style: %[ fontBold: true, fontHeight: 14 ] ]));
				.customUIList.uiTest.add(
					new KCustomUI(this, %[
					name: "customUI",
						labelStyle: UI_LABEL_STYLE_LEFTTOPCORNER,
						uis: [
							%[ type: UI_TYPE_BEGIN_FRAME, label: "サブフレーム" ],
							%[ type: UI_TYPE_TEXTLABEL, label: "シンプルなテキストラベル" ],
							%[ type: UI_TYPE_SLIDER, label: "スライダー", left: -10, right: 30, stride: 0.1, value: 4.1, name: "cui_slider" ],
							%[ type: UI_TYPE_TEXTINPUT, name: "texinput", label: "テキスト入力" ],
							%[ type: UI_TYPE_BEGIN_FRAME, label: "サブサブフレーム" ],
							%[ type: UI_TYPE_CHECKBOX, name: "checkbox", label: "チェックボックス", value: true ],
							%[ type: UI_TYPE_TEXTAREA, name: "textarea", label: "テキストエリア", value: "改行を許すテキスト領域\nテキストエディット" ],
							%[ type: UI_TYPE_END_FRAME, label: "サブサブフレーム" ],
							%[ type: UI_TYPE_DROPDOWNLIST, name: "dropdownlist", label: "ドロップダウンリスト",
							   captions: [ "選択肢1", "選択肢2", "選択肢3" ],
							   values: [ 1, 2, 3],
							   value: 3 ],
							%[ type: UI_TYPE_END_FRAME ],
							%[ type: UI_TYPE_BEGIN_FRAME, label: "サブフレーム2" ],
							%[ type: UI_TYPE_TABLE, name: "table", label: "",
							   defaultColumnOptions: %[ editable: true ],
							   attributes: [
								   [ KTextTableColumn,     "名前",     "name"  ],
								   [ KIntTableColumn,      "価格",     "price"  ],
								   [ KIntTableColumn,      "個数",     "count"  ],
								   [ KCheckBoxTableColumn, "出荷済み", "shiped" ]
							   ],
							   value: [
									   %[ name: "あんまん", price: 100, count: 10 ],
									   %[ name: "にくまん", price: 120, count: 10 ],
									   %[ name: "ピザまん", price: 110, count: 5, shiped: true ]
							   ]
							 ]
					]
														]));


				.add("ボタン", new KFrameLayout(this, %[ name: "buttonFrame", id: "group_frame", label: "ボタンフレーム" ]));
				.buttonFrame.add(new KGridLayout(this, %[ name: "buttonGrid", id: "widget_grid" ]));
				.buttonGrid.add(0, 0, new KTextButton(this, %[ name: "button1",
															   label: "ボタン1" ]));
				.buttonGrid.add(1, 0, new KTextButton(this, %[ name: "button2",
															   label: "ボタン2" ]));
				.buttonGrid.add(0, 1, new KTextButton(this, %[ name: "button3",
															   label: "ボタン3" ]));
				.buttonGrid.add(1, 1, new KTextButton(this, %[ name: "button4",
															   label: "ボタン4" ]));

				.add("チェックボックス", new KFrameLayout(this, %[ name: "checkFrame", id: "group_frame", label: "チェックボックスフレーム" ]));
				.checkFrame.add(new KGridLayout(this, %[ name: "checkGrid", id: "widget_grid" ]));
				.checkGrid.add(0, 0, new KCheckBox(this, %[ name: "check1",
															label: "チェック1" ]));
				.checkGrid.add(1, 0, new KCheckBox(this, %[ name: "check2",
															label: "チェック2" ]));
				.checkGrid.add(0, 1, new KCheckBox(this, %[ name: "check3",
															label: "チェック3" ]));
				.checkGrid.add(1, 1, new KCheckBox(this, %[ name: "check4",
															label: "チェック4" ]));

				.add("スライダー", new KFrameLayout(this, %[ name: "sliderFrame", id: "group_frame", label: "スライダーフレーム" ]));
				.sliderFrame.add(new KGridLayout(this, %[ name: "sliderGrid", id: "widget_grid" ]));
				.sliderGrid.add(0, 0, new KTextInputSlider(this, %[ width: 200, left: 0, right: 1000, stride: 1, name: "slider", leftIcon: "k_scroll_left", rightIcon: "k_scroll_right", leftIconHint: "left icon", rightIconHint: "right icon", hint: "hoge", style: %[ isVariableWidth: true ]  ]));
		}

		Debug.message("before attach to window");
		primaryWidget.add(testTab);
		Debug.message("after attach to window");

		var dict = new KPersistentDictionary(System.dataPath + "testbed_dict.txt");
		add(dict);
		bindPersistentDictionary(dict);
	}

	function onChildValueModified(child, value) {
		switch (child.name) {
		default: {
			// 更新のあったウィジェットの名前と値を表示。
			Debug.message("child value modified", child.name, typeof(value), value);
			break;
		}
		}
	}
}

global.testBed = void;

function showTestBed
{
	if (testBed === void)
		testBed = new TestBed();
	testBed.visible = true;
}

function hideTestBed
{
	testBed.visible = false;
}
