/**----------------------------------------------------------------------
 * トグルボタン
 ----------------------------------------------------------------------*/
global.KLabelArgsFormat =
	[
			%[ key: "label", defaultValue: "" ],
			%[ key: "name", defaultValue: "" ]
	];

global.KLabelWidgetStyleDefinition = [
	[ "isVariableWidth", "isVariableWidth", false ]
];

class KLabel extends KEntity
{
	// ラベル
	var _label;
	//ラベルサイズ
	var labelWidth, labelHeight;

	/*------------------------------
	 * コンストラクタ
	 *
	 * @param win ウィンドウ
	 * @param labelWidget ボタンの真ん中に表示するラベルウィジェット
	 * @param name 名前
	 ------------------------------*/
	function KLabel(win, *) {
		var opts = parseOldStyleWidgetArgs(KLabelArgsFormat, *);

		super.KEntity(win, opts);

		addWidgetStyleDefinition(KLabelWidgetStyleDefinition);
		addCustomWidgetStyleDefinition();

		// 値の初期値
		_label = getInitialLabel();
	}

	/**------------------------------
	 * ラベルの値
	 *
	 * @return ラベルの値
	 * @param v 新規のラベルの値
	 ------------------------------*/
	property label {
		getter {
			return _label;
		}
		setter(v) {
			_label = v;
			redrawContents();
		}
	}

	/*------------------------------
	 * 描画
	 ------------------------------*/
	function onDrawContents() {
		// ラベルサイズを計算
		onCalcLabelSize();

		var minW = borderPaddingWidth + labelWidth, minH = borderPaddingHeight + labelHeight;

		if (! widgetStyle.isVariableWidth)
			setFixedSize(minW, minH);
		else
			setMinMaxSize(K_WIDGET_MIN_POSSIBLE_WIDTH, minH, K_WIDGET_MAX_POSSIBLE_WIDTH, minH);

		// ボーダー描画
		drawBorder(borderStyle, 0, 0, width, height);

		onDrawLabel(borderPaddingLeft, borderPaddingTop, width - borderPaddingWidth, height - borderPaddingHeight);
	}
}

/*----------------------------------------------------------------------
 * テキストケイパビリティ
 ----------------------------------------------------------------------*/
global.KTextCapabilityWidgetStyleDefinition = [
	[ "lineSpacing", "lineSpacing", 0 ],
	[ "textAlign", "textAlign", ALIGN_LEFT ],
	[ "maxLabelWidth", "maxLabelWidth", 0 ]
];

class KTextCapability
{
	function getInitialLabel() {
		return getOption("label", "");
	}

	function onCalcLabelSize() {
		this.textArea = extractTextArea(fontStyle, label, widgetStyle.lineSpacing);
		if (widgetStyle.maxLabelWidth)
			textArea.width = Math.min(widgetStyle.maxLabelWidth, textArea.width);
		labelWidth = textArea.width;
		labelHeight = textArea.height;
	}

	function onDrawLabel(x, y, w, h) {
		drawTextArea(fontStyle, x, y, w, widgetStyle.lineSpacing, textArea.texts, textArea.textWidths, widgetStyle.textAlign);
	}

	function addCustomWidgetStyleDefinition() {
		addWidgetStyleDefinition(KTextCapabilityWidgetStyleDefinition);
	}
};

/*----------------------------------------------------------------------
 * テキストラベル
 ----------------------------------------------------------------------*/
class KTextLabel extends KLabel
{

	/*------------------------------
	 * コンストラクタ
	 *
	 * @param win ウィンドウ
	 ------------------------------*/
	function KTextLabel(win, *) {
		super.KLabel(win, *);
	}
}

mixin(KTextLabel, KTextCapability);

/*----------------------------------------------------------------------
 * イメージケイパビリティ
 ----------------------------------------------------------------------*/
global.KImageCapabilityWidgetStyleDefinition = [
	[ "icon", "icon", void ]
];

class KImageCapability
{
	function getInitialLabel() {
		return getOption("label", getOption("icon", ""));
	}

	function addCustomWidgetStyleDefinition() {
		addWidgetStyleDefinition(KImageCapabilityWidgetStyleDefinition);
	}

	function getIconLabel() {
		var iconLabel = widgetStyle.icon;
		if (iconLabel === void)
			iconLabel = label;
		return iconLabel;
	}

	function onCalcLabelSize {
		var labelLayer = findIcon(getIconLabel());
		labelWidth = labelLayer.width;
		labelHeight = labelLayer.height;
	}

	function onDrawLabel(x, y, w, h) {
		var iconLabel = widgetStyle.icon;
		if (iconLabel === void)
			iconLabel = label;
		var labelLayer = findIcon(getIconLabel());
		operateRect(x + (w - labelLayer.width) / 2, y + (h - labelLayer.height) / 2, labelLayer, 0, 0, w, h, omAuto, appearanceStyle.opacity);
	}
};

/*----------------------------------------------------------------------
 * イメージラベル
 ----------------------------------------------------------------------*/
class KImageLabel extends KLabel
{
	/*------------------------------
	 * コンストラクタ
	 *
	 * @param win ウィンドウ
	 ------------------------------*/
	function KImageLabel(win, *) {
		super.KLabel(win, *);
	}

	property icon {
		getter {
			return label;
		}
		setter(v) {
			label = v;
		}
	}
}

mixin(KImageLabel, KImageCapability);
