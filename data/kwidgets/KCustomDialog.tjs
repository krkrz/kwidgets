//
// シンプルなダイアログ。
// 格納するウィジェットリストを定義式で与えて作成する。
//
// ex) 
//   var def = %[ 
//       name: "test_dialog",
//       response: DIALOG_RESPONSE_OK | DIALOG_RESPONSE_CANCEL,
//       caption: "Test Dialog",
//       widgetList: [ %[ name: "check", label: "チェックボックス", type: DIALOG_WIDGET_TYPE_CHECKBOX,  defaultValue: true ],
//                     %[ name: "int",   label: "整数入力",         type: DIALOG_WIDGET_TYPE_TEXTINPUT, textType: TEXT_DIGIT ],
//                     %[ name: "real",  label: "小数入力",         type: DIALOG_WIDGET_TYPE_TEXTINPUT, textType: TEXT_REAL, defaultValue: 0.5 ],
//                     %[ name: "str",   label: "文字入力",         type: DIALOG_WIDGET_TYPE_TEXTINPUT, textType: TEXT_ANY ],
//                     %[ name: "text",  label: "テキスト",         type: DIALOG_WIDGET_TYPE_TEXTBOX,   defaultValue: "ほげ\nもげ" ],
//                     %[ name: "list",  label: "リスト":           type: DIALOG_WIDGET_TYPE_DROPDOWNLIST, listItems: [ "項目1", [ "項目2", 2 ], [ "項目3", 3 ] ], defaultValue: 2]
//                     ]
//   ];


class KCustomDialog extends KWindow
{
	var uiList;
	var hasCancel = false;
	var result = DIALOG_RESPONSE_CANCEL;
	var response;
	var done = false;
	var valueStore = %[];

	function KCustomDialog(owner, dict, options) {
		this.owner = owner;
		var options = duplicateStruct(options);
		options.theme = "dialog";
		super.KWindow(options);

		borderStyle = bsDialog;

		defaultFocusable = true;

		primaryLayer.add(new KGridLayout(this, %[ name: "rootGrid", id: "widget_grid", style: %[ isClass: %[ KWidget: %[ alignHorizontal: ALIGN_CENTER ] ] ] ]));

		rootGrid.add(0, 0, new KCustomUI(this, %[ name: "uiPane",
												  uis: getOption("uis", []),
												  uiNamePrefix: getOption("uiNamePrefix", "") ]));
		rootGrid.add(0, 1, new KGridLayout(this, %[ name: "buttonGrid", id: "button_grid" ]));

		uiList = uiPane.uiList;
		response = getOption("response", DIALOG_RESPONSE_OK | DIALOG_RESPONSE_CANCEL);

		var x = 0;
		if (response & DIALOG_RESPONSE_OK) 
			buttonGrid.add(x++, 0, new KTextButton(this, %[ label: "OK", name: "okButton", id: "primary_button" ]));
		if (response & DIALOG_RESPONSE_CANCEL) 
			buttonGrid.add(x++, 0, new KTextButton(this, "キャンセル", "cancelButton"));
		invalidateLayout();

		setPos(owner.left + (owner.width - width) / 2,
			   owner.top + (owner.height - height) / 2);

		if (dict !== void)
			bindPersistentDictionary(dict);

		callFunc("onInit");

		storeWidgetValue();
	}

	function finalize() {
		visible = false;
		if (result == DIALOG_RESPONSE_CANCEL)
			restoreWidgetValue();
		super.finalize(...);
	}

	function getValue(def, key, defaultValue) {
		if (typeof(def[key]) != "undefined")
			return def[key];
		else
			return defaultValue;
	}

	function storeWidgetValue() {
		for (var i = 0; i < uiList.count; i++) {
			var ui = uiList[i];
			valueStore[ui.name] = ui.widget.value;
		}
	}

	function restoreWidgetValue() {
		for (var i = 0; i < uiList.count; i++) {
			var ui = uiList[i];
			ui.widget.value = valueStore[ui.name];
		}
	}

	function onChildValueModified(widget, value) {
		switch (widget.name) {
		case "okButton":
			ok();
			break;
		case "cancelButton":
			cancel();
			break;
		}
	}

	function callFunc(key, defaultValue, *) {
		var func = getOption(key, void);
		if (func === void)
			return defaultValue;
		else
			return (func incontextof(this))(*);
	}

	function onCloseQuery() {
		if (done
			|| response & DIALOG_RESPONSE_CANCEL) {
			return super.onCloseQuery(true);
		} else {
			return super.onCloseQuery(false);
		} 
	}

	function ok() {
		if (! callFunc("onQuerySubmit", true))
			return;
		result = %[];
		for (var i = 0; i < uiList.count; i++) {
			var ui = uiList[i];
			result[ui.key] = ui.widget.value;
		}
		callFunc("onSubmit");
		done = true;
		close();
	}

	function cancel() {
		result = DIALOG_RESPONSE_CANCEL;
		callFunc("onCancel");
		close();
	}
};

function queryCustomDialog(owner, dict, options)
{
	var win = new KCustomDialog(...);
	win.showModal();
	var result = win.result;
	invalidate win;
	return result;
}
