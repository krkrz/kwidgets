//
// $Id: KSlider.tjs,v 1.5 2007/09/04 19:02:38 cvs Exp $
//

global.SLIDER_ADAPTIVE_WIDTH = 0;
global.SLIDER_SLIDER_WIDTH = 8;
global.SLIDER_FRAME_SIZE = 3;


global.KSliderArgsFormat =
	[
			%[ key: "width", defaultValue: SLIDER_ADAPTIVE_WIDTH ],
			%[ key: "height", defaultValue: 20 ],
			%[ key: "left", defaultValue: 0 ],
			%[ key: "right", defaultValue: 100 ],
			%[ key: "stride", defaultValue: 1 ],
			%[ key: "name", defaultValue: "" ]
	];

class KSlider extends KRangePointer2D
{
	var adaptiveWidth;

	/**------------------------------
	 * コンストラクタ
	 *
	 * スライダーを作成します。
	 * widthに定数SLIDER_ADAPTIVE_WIDTHを指定すると、スライダーは最小値から最大値まで
	 * 全ての値をスライドで指定できるのにじゅうぶんな最小の幅を自動的に計算して指定します。
	 *
	 * @param winndow ウィンドウ
	 * options
	 name 名前
	 width: スライダーの幅
	 height(20): スライダーの高さ
	 left: スライダーの左端の値
	 right: スライダーの右端の値
	 stride: スライダーの刻み幅
	 ------------------------------*/
	function KSlider(window, *) {
		var opts = parseOldStyleWidgetArgs(KSliderArgsFormat, *);

		opts.hLeft = getOption("left", 0, opts);
		opts.hRight = getOption("right", 100, opts);
		opts.hKnobSize = 0;
		opts.hKnobBlockStride = opts.hKnobStride = getOption("stride", 1, opts);
		opts.hKnobPixelSize = SLIDER_SLIDER_WIDTH;
		opts.interpolation = getOption("interpolation", false, opts);

		this.step = opts.hKnobStride;
		this.leftValue = int(opts.hLeft / step);
		this.rightValue = int(opts.hRight / step);
		this.minValue = int(Math.min(this.leftValue, this.rightValue));
		this.maxValue = int(Math.max(this.leftValue, this.rightValue));

		adaptiveWidth = maxValue - minValue + opts.hKnobPixelSize + 1;

		super.KRangePointer2D(window, opts);

		focusable = getOption("focusable", window.defaultFocusable);
	}

	property value {
		getter {
			return pointerValue.h;
		}
		setter(v) {
			pointerValue = %[ h: v, v: 0 ];
		}
	}

	function onExtractWidgetStyle(widgetStyle) {
		super.onExtractWidgetStyle(...);
		widgetStyle.width = getStyleProperty("width", void);
		widgetStyle.height = getStyleProperty("height", void);
	}

	function onDrawContents() {
		var w = widgetStyle.width ? widgetStyle.width : getOption("width", SLIDER_ADAPTIVE_WIDTH);
		var h = widgetStyle.height ? widgetStyle.height : getOption("height", 20);

		if (w == SLIDER_ADAPTIVE_WIDTH)
			w = adaptiveWidth;

		setFixedSize(w, h);

		super.onDrawContents();
	}
}

