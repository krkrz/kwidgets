/**----------------------------------------------------------------------
 * トグルボタン
 ----------------------------------------------------------------------*/
global.KToggleButtonArgsFormat =
	[
			%[ key: "label", defaultValue: "" ],
			%[ key: "name", defaultValue: "" ]
	];

global.KToggleButtonWidgetStyleDefiiotion =
	[
			%[ key: "variable", defaultValue: false ],
			%[ key: "width", defaultValue: void ],
			%[ key: "height", defaultValue: void ]
	];

class KToggleButton extends KValueEntity
{
	// 値
	var _value = false;
	// ラベル
	var _label;
	//ラベルサイズ
	var labelWidth, labelHeight;

	/*------------------------------
	 * コンストラクタ
	 *
	 * @param win ウィンドウ
	 * @param labelWidget ボタンの真ん中に表示するラベルウィジェット
	 * @param name 名前
	 ------------------------------*/
	function KToggleButton(win, *) {
		var opts = parseOldStyleWidgetArgs(KToggleButtonArgsFormat, *);

		super.KValueEntity(win, opts);

		// 値の初期値
		_label = getInitialLabel();
		_value = getOption("value", false);

		addCustomStyleState(_value ? "toggleOn" : "toggleOff", true);

		// デフォルトフォーカス
		focusable = getOption("focusable", win.defaultFocusable);

		// 辺り判定オール受けつけ
		hitThreshold = 0;
	}

	property widgetStyleDefinition {
		getter {
			return concatArray(super.widgetStyleDefinition, concatArray(signWidgetStyleDefinition, KToggleButtonWidgetStyleDefiiotion));
		}
	}

	/**------------------------------
	 * ラベルの値
	 *
	 * @return ラベルの値
	 * @param v 新規のラベルの値
	 ------------------------------*/
	property label {
		getter {
			return _label;
		}
		setter(v) {
			_label = v;
			redrawContents();
		}
	}

	/*------------------------------
	 * 描画
	 ------------------------------*/
	function onDrawContents() {
		// ラベルサイズを計算
		onCalcLabelSize();

		var minW = widgetStyle.width ? widgetStyle.width : getOption("width", borderPaddingWidth + labelWidth);
		var minH = widgetStyle.height ? widgetStyle.height : getOption("height", borderPaddingHeight + labelHeight);

		if (! widgetStyle.variable) 
			setFixedSize(minW, minH);
		else
			setMinMaxSize(K_WIDGET_MIN_POSSIBLE_WIDTH, minH, K_WIDGET_MAX_POSSIBLE_WIDTH, minH);

		// ボーダー描画
		drawBorder(borderStyle, 0, 0, width, height);

		onDrawLabel(borderPaddingLeft, borderPaddingTop, width - borderPaddingWidth, height - borderPaddingHeight);
	}

	/*------------------------------
	 * マウスボタンに反応する
	 *
	 * マウスボタンを押して値が変わると、 onValueModified が呼ばれます
	 ------------------------------*/
	function onMouseDown(x, t, button, shift) {
		super.onMouseDown(...);

		if (button != mbLeft)
			return;

		focus();
	}

	function onMouseUp(x, y, button, shift) {
		super.onMouseUp(...);

		if (button != mbLeft)
			return;

		value = ! value;
		onValueModified(value, ! value);
	}

	/*------------------------------
	 * キーボードに反応する
	 *
	 * キーボードを押して値が変わると、 onValueModified が呼ばれます
	 ------------------------------*/
	function onKeyDown(key, shift) {
		if (key == VK_SPACE || key == VK_RETURN) {
			value = ! value;
			onValueModified(value, ! value);
		} else {
			super.onKeyDown(...);
		}
	}

	/*------------------------------
	 * 値を設定する
	 *
	 * @param v 値
	 * @return 値
	 ------------------------------*/
	property value {
		getter {
			return _value;
		}
		setter(v) {
			// 変更があった場合のみ更新をする
			if (_value == v)
				return;
			// 値を更新
			_value = v;
			if (_value)
				addRemoveCustomStyleState("toggleOn", "toggleOff");
			else
				addRemoveCustomStyleState("toggleOff", "toggleOn");
		}
	}
}

/*----------------------------------------------------------------------
 * テキストグルボタン
 ----------------------------------------------------------------------*/
class KTextToggleButton extends KToggleButton
{

	/*------------------------------
	 * コンストラクタ
	 *
	 * @param win ウィンドウ
	 ------------------------------*/
	function KTextToggleButton(win, *) {
		super.KToggleButton(win, *);
	}
}

mixin(KTextToggleButton, KTextCapability);

/*----------------------------------------------------------------------
 * イメージトグルボタン
 ----------------------------------------------------------------------*/
class KImageToggleButton extends KToggleButton
{
	/*------------------------------
	 * コンストラクタ
	 *
	 * @param win ウィンドウ
	 ------------------------------*/
	function KImageToggleButton(win, *) {
		super.KToggleButton(win, *);
	}

	property icon {
		getter {
			return label;
		}
		setter(v) {
			label = v;
		}
	}
}

mixin(KImageToggleButton, KImageCapability);


/*----------------------------------------------------------------------
 * マークダウントグルボタン
 ----------------------------------------------------------------------*/
class KMarkdownToggleButton extends KToggleButton
{
	/*------------------------------
	 * コンストラクタ
	 *
	 * @param win ウィンドウ
	 ------------------------------*/
	function KMarkdownToggleButton(win, *) {
		super.KToggleButton(win, *);
	}

	property text {
		getter {
			return label;
		}
		setter(v) {
			label = v;
		}
	}
}

mixin(KMarkdownToggleButton, KMarkdownCapability);
