/**----------------------------------------------------------------------
 * サイズ制限レイアウト
 ----------------------------------------------------------------------*/
global.KSizeLimitLayoutArgsFormat =
	[
			%[ key: "minWidth", defaultValue: void ],
			%[ key: "minHeight", defaultValue: void ],
			%[ key: "maxWidth", defaultValue: void ],
			%[ key: "maxHeight", defaultValue: void ],
			%[ key: "name", defaultValue: "" ]
	];

class KSizeLimitLayout extends KLayout
{
	var child;
	var limitMinW, limitMinH, limitMaxW, limitMaxH;

	/**------------------------------
	 * コンストラクタ
	 *
	 * @param window ウィンドウ
	 * @param minW 最小幅(voidなら適用しない)
	 * @param minH 最大高(voidなら適用しない)
	 * @param maxW 最大幅(voidなら適用しない)
	 * @param maxH 最大高(voidなら適用しない)
	 * @param name 名前
	 ------------------------------*/
	function KSizeLimitLayout(window, *) {
		var options = parseOldStyleWidgetArgs(KSizeLimitLayoutArgsFormat, *);
		super.KLayout(window, options);
		limitMinW = getOption("minWidth", getOption("fixedWidth", void));
		limitMinH = getOption("minHeight", getOption("fixedHeight", void));
		limitMaxW = getOption("maxWidth", getOption("fixedWidth", void));
		limitMaxH = getOption("maxHeight", getOption("fixedHeight", void));

		hasImage = false;
	}

	/**------------------------------
	 * 子ウィジェットを配置する
	 *
	 * @param child 子ウィジェット
	 ------------------------------*/
	function add(child) {
		this.child = child;
		child.parent = this;
		redrawContents();
	}

	/**------------------------------
	 * 子ウィジェットを削除する
	 *
	 * @param child 子ウィジェット
	 * @param doInvalidate invalidateするかどうか
	 ------------------------------*/
	function remove(child, doInvalidate = true) {
		this.child = void;
		child.parent = widgetDepot;
		redrawContents();
		if (doInvalidate)
			invalidate child;
	}

	/*------------------------------
	 * レイアウトやり直し
	 ------------------------------*/
	function onCalculateLayout {
		var minW, minH, maxW, maxH;
		var labelW, labelH;

		minW = minH = maxW = maxH = 0;
		labelW = labelH = 0;

		if (child) {
			minW = child.minWidth + child.marginHorizontal;
			minH = child.minHeight + child.marginVertical;
			maxW = child.maxWidth + child.marginHorizontal;
			maxH = child.maxHeight + child.marginVertical;
		}

		if (limitMinW !== void)
			minW = Math.max(limitMinW, minW);
		if (limitMinH !== void)
			minH = Math.max(limitMinH, minH);
		if (limitMaxW !== void)
			maxW = Math.min(limitMaxW, maxW);
		if (limitMaxH !== void)
			maxH = Math.min(limitMaxH, maxH);

		minW = Math.min(minW, maxW);
		minH = Math.min(minH, maxH);
		maxW = Math.max(minW, maxW);
		maxH = Math.max(minH, maxH);

		setMinMaxSize(minW, minH, maxW, maxH);
	}

	function onLocateLayout {
		if (! child)
			return;

		child.setSize(width - child.marginHorizontal, height - child.marginVertical);
		locateChild(0, 0, child.width, child.height, child);
	}
};
