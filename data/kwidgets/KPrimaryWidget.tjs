//
// $Id: KPrimaryWidget.tjs,v 1.9 2007/09/04 10:29:44 m2 Exp $
//


/**----------------------------------------------------------------------
 * プライマリウィジェット
 *
 * ウィンドウの作成時に自動的に作成される
 ----------------------------------------------------------------------*/
class KPrimaryWidget extends KLayout
{
	// 子ウィジェット
	var child;
	// ウィジェット一時倉庫。レイアウトにaddされていないウィジェットが一時的に格納される。
	var widgetDepot;
	var iconDepot;
	var dummyIcon;
	var primitiveIconBuilder;

	/**------------------------------
	 * コンストラクタ
	 *
	 * KPrimaryWidget は KWindow により自動的に作成され、ユーザーが
	 * 明示的にnewすることは無い
	 ------------------------------*/
	function KPrimaryWidget(win) {
		// 親呼び出し
		super.KLayout(win, %[ name: "", primary: true ]);
		// イメージを持たない
		// 子はまだ無し
		child = void;
		// BGカラーは灰色
		// ウィジェットの一時置き場
		widgetDepot = new global.Layer(win, this);
		// ダミーレイヤ
		dummyIcon = new global.Layer(win, this);
		dummyIcon.setSize(0, 0);
		// アイコンの一時置き場
		iconDepot = %[];
		// プリミティブアイコンビルダ
		primitiveIconBuilder = new KPrimitiveIconBuilder(window);
		// ウィンドウにはアタッチ済み
		attachToWindow();
	}

	//------------------------------
	// アイコンをロードしてキャッシュする
	function findIcon(filename) {
		var key = filename;

		if (key == "")
			return dummyIcon;
		if (typeof(iconDepot[key]) !== K_UNDEFINED)
			return iconDepot[key];

		var filename = styleRepository.resolveAlias("icon", filename);

		var layer = new global.Layer(window, this);

		try {
			if (primitiveIconBuilder.matchIcon(filename)) {
				primitiveIconBuilder.drawIcon(layer, filename);
			} else {
				layer.loadImages(filename);
				layer.setSizeToImageSize();
			}
			iconDepot[key] = layer;
		}
		catch(e) {
			Debug.message(e.message);
			Debug.message(e.trace);
			invalidate layer;
			iconDepot[key] = dummyIcon;
		}
		return iconDepot[key];
	}

	//------------------------------
	// アイコンキャッシュをクリアする
	function clearIconCache() {
		eachDictionary(iconDepot, function(key, value) { invalidate value; });
		iconDepot = %[];
		invalidate dummyIcon;
		dummyIcon = new global.Layer(window, this);
		dummyIcon.setSize(1, 1);
	}

	/**------------------------------
	 * 子ウィジェットをはめ込む
	 *
	 * プライマリウィジェットには1度に1つのウィジェットしか「追加」できない
	 *
	 * @param 子ウィジェット
	 ------------------------------*/
	function add(child) {
		this.child = child;
		child.parent = this;
		redrawContents();
	}

	/**------------------------------
	 * 子ウィジェットを取り除く
	 *
	 * @param 子ウィジェット
	 * @param doInvalidate invalidateするかどうか
	 ------------------------------*/
	function remove(child, doInvalidate = true) {
		child.parent = widgetDepot;
		this.child = void;
		if (doInvalidate)
			invalidate child;
		redrawContents();
	}

	// 再配置
	function onCalculateLayout {
		if (child === void)
			return;
		setMinMaxSize(borderPaddingWidth + child.minWidth + child.marginHorizontal,
					  borderPaddingHeight + child.minHeight + child.marginVertical,
					  borderPaddingWidth + child.maxWidth + child.marginHorizontal,
					  borderPaddingHeight + child.maxHeight + child.marginVertical);
	}

	function onLocateLayout() {
		if (child === void)
			return;
		embedChild(0, 0, width, height, child, true);
	}

	property styleParent {
		getter {
			return window;
		}
	}
};
