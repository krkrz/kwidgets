/**----------------------------------------------------------------------
 * テキストインプットスライダー
 ----------------------------------------------------------------------*/
global.KTextInputSliderArgsFormat =
	[
			%[ key: "width", defaultValue: SLIDER_ADAPTIVE_WIDTH ],
			%[ key: "height" ],
			%[ key: "left" ],
			%[ key: "right" ],
			%[ key: "stride", defaultValue: 1 ],
			%[ key: "name", defaultValue: "" ]
	];

class KTextInputSlider extends KValueEntity
{
	var _value;
	var textInput;
	var slider;
	// 辞書
	var dict;

	/*------------------------------
	 * テキストインプットとスライダーを合成したウィジェットです。
	 *
	 * @param win ウィンドウ
	 * @param w 幅
	 * @param h 高さ
	 * @param minValue 値の最小値
	 * @param maxValue 値の最大値
	 * @param name 名前
	 * @param step 刻み幅
	 ------------------------------*/
	function KTextInputSlider(window, *) {
		var options = parseOldStyleWidgetArgs(KTextInputSliderArgsFormat, *);

		super.KValueEntity(window, options);

		var w = getOption("width");
		var h = getOption("height");
		var stride = getOption("stride");
		var left = getOption("left");
		var right = getOption("right");
		var v = getOption("value", left);

		textInput = new KTextInput(window, %[ width: h * 2,
											  height: h,
											  type: stride == int(stride) ? TEXT_DIGIT : TEXT_REAL,
											  value: string(v) ]);
		slider = new KSlider(window, %[ width: w,
										height: h,
										left: left,
										right: right,
										stride: stride,
										focusable: false,
										value: v,
										interpolation: getOption("interpolation", false)
									  ]);

		textInput.parent = this;
		slider.parent = this;

		_value = v;
	}

	/**------------------------------
	 * ウィジェットスタイルを展開
	 ------------------------------*/
	function onExtractWidgetStyle(widgetStyle) {
		widgetStyle.textInputId = getOption("textinputId");
		widgetStyle.sliderId = getOption("sliderId");
	}


	/**------------------------------
	 * 値を設定する
	 *
	 * @param v 値
	 * @return 値
	 ------------------------------*/
	property value {
		getter {
			return _value;
		}
		setter(v) {
			slider.value = v;
			_value = slider.value;
			textInput.value = string(_value);
		}
	}

	/**------------------------------
	 * 子の値変更を受けて値を同期
	 ------------------------------*/
	function onChildValueModified(child, newValue) {
		value = newValue;
		invalidateValue();
	}

	/**------------------------------
	 * 描画
	 ------------------------------*/
	function onDrawContents() {
		textInput.id = widgetStyle.textInputId;
		slider.id = widgetStyle.sliderId;
		var w = textInput.width + spaceHorizontal + slider.width;
		var h = Math.max(textInput.height, slider.height);
		setFixedSize(w, h);
		textInput.setPos(0, (h - textInput.height) / 2);
		slider.setPos(textInput.width + spaceHorizontal, (h - slider.height) / 2);
	}
};
