/**----------------------------------------------------------------------
 * チェックボックス
 ----------------------------------------------------------------------*/
global.KCheckBoxArgsFormat =
	[
			%[ key: "label", defaultValue: "" ],
			%[ key: "name", defaultValue: "" ]
	];

class KCheckBox extends KValueEntity
{
	var _value = false;

	var _label;
	var isVariableWidth = false;

	function KCheckBox(win, *) {
		var opts = parseOldStyleWidgetArgs(KCheckBoxArgsFormat, *);

		super.KValueEntity(win, opts);

		_label = getOption("label", "");
		isVariableWidth = getOption("isVariableWidth", false);
		_value = getOption("value", false);

		// デフォルトフォーカス
		focusable = getOption("focusable", win.defaultFocusable);

		// 辺り判定オール受けつけ
		hitThreshold = 0;

		// カスタムステート
		addCustomStyleState(_value ? "checkOn" : "checkOff", true);
	}

	/**------------------------------
	 * ラベルの値
	 *
	 * @return ラベルの値
	 * @param v 新規のラベルの値
	 ------------------------------*/
	property label {
		getter {
			return _label;
		}

		setter(v) {
			// 内容が更新されている時だけ処理
			if (_label == v)
				return;
			// 値を更新
			_label = v;
			// 再描画
			redrawContents();
		}
	}

	/*------------------------------
	 * ウィジェットスタイル
	 ------------------------------*/
	function onExtractWidgetStyle(widgetStyle) {
		widgetStyle.icon = getStyleProperty("icon", "");
		widgetStyle.lineSpacing = getStyleProperty("lineSpacing", 0);
	}

	/*------------------------------
	 * 描画
	 ------------------------------*/
	function onDrawContents() {
		// アイコンの設定
		var iconLayer = findIcon(widgetStyle.icon);
		var iconWidth = iconLayer.width + borderPaddingWidth;
		var iconHeight = iconLayer.height + borderPaddingHeight;

		// テキストエリアのサイズを計算
		var textArea = extractTextArea(fontStyle, _label, widgetStyle.lineSpacing);

		var minW = textArea.width + iconWidth + spaceHorizontal;
		var minH = Math.max(textArea.height, iconHeight);

		if (! isVariableWidth)
			setFixedSize(minW, minH);
		else
			setMinMaxSize(K_WIDGET_MIN_POSSIBLE_WIDTH, minH, K_WIDGET_MAX_POSSIBLE_WIDTH, minH);

		fillRect(0, 0, width, height, 0);

		// ボーダー描画
		var iconLeft = 0;
		var iconTop = (height - iconHeight) / 2;
		drawBorder(borderStyle, 0, iconTop, iconWidth, iconHeight);

		// アイコン描画
		operateRect(iconLeft + borderPaddingLeft, iconTop + borderPaddingTop,
					iconLayer, 0, 0, iconLayer.width, iconLayer.height,
					omAuto, appearanceStyle.opacity);

		var textLeft = iconLeft + iconWidth + spaceHorizontal;
		var textTop = (height - textArea.height) / 2;
		// テキスト描画
		drawTextArea(fontStyle,
					 textLeft, textTop,
					 width - textLeft, widgetStyle.lineSpacing,
					 textArea.texts, textArea.textWidths, widgetStyle.textAlign);
	}

	/*------------------------------
	 * マウスボタンに反応する
	 *
	 * マウスボタンを押して値が変わると、 onValueModified が呼ばれます
	 ------------------------------*/
	function onMouseDown() {
		super.onMouseDown();
		focus();
	}

	function onMouseUp {
		super.onMouseUp(...);
		value = ! value;
		onValueModified(value, ! value);
	}

	/*------------------------------
	 * キーボードに反応する
	 *
	 * キーボードを押して値が変わると、 onValueModified が呼ばれます
	 ------------------------------*/
	function onKeyDown(key, shift) {
		if (key == VK_SPACE || key == VK_RETURN) {
			value = ! value;
			onValueModified(value, ! value);
		} else {
			super.onKeyDown(...);
		}
	}

	/*------------------------------
	 * 値を設定する
	 *
	 * @param v 値
	 * @return 値
	 ------------------------------*/
	property value {
		getter {
			return _value;
		}
		setter(v) {
			// 変更があった場合のみ更新をする
			if (_value == v)
				return;
			// 値を更新
			_value = v;
			if (_value) {
				addRemoveCustomStyleState("checkOn", "checkOff");
			} else
				addRemoveCustomStyleState("checkOff", "checkOn");
		}
	}
};

