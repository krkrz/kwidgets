global.KTextBoardArgsFormat =
	[
			%[ key: "name", defaultValue: "" ]
	];

class KTextBoard extends KVirtualWidget
{
	var rows = [];
	var linefeedPat = new RegExp("\r\n|\r|\n");

	function KTextBoard(window, *) {
		var options = parseOldStyleWidgetArgs(KTextBoardArgsFormat, *);
		options.middleButtonDrag = true;
		super.KVirtualWidget(window, options);
		setMarginalMinMaxSize(0, 0, K_WIDGET_MAX_POSSIBLE_WIDTH, K_WIDGET_MAX_POSSIBLE_WIDTH);
	}

	property value {
		getter {
			return rows.join("\r\n");
		}
		setter (v) {
			rows = v.split(linefeedPat);
			if (isAttachedToWindow) {
				invalidateLayout();
				redrawAll();
			}
		}
	}

		function onAttachedToWindow() {
			invalidateLayout();
		}

	function invalidateLayout() {
		var w = 0;
		for (var i = 0; i < rows.count; i++)
			w = Math.max(w, rows[i].length);
		w *= fontStyle.fontHeight;
		var h = rows.count * fontStyle.fontHeight + (rows.count - 1) * layoutStyle.spaceVertical;
		setMinMaxSize(w, h, w, h);
	}

	function onDraw(l, t, w, h) {
		fillRect(l, t, w, h, borderStyle.backgroundColor);
		applyFontStyle(font, fontStyle);
		var rowH = fontStyle.fontHeight + layoutStyle.spaceVertical;
		var maxRow = rows.count - 1;
		var fromIndex = Math.min(maxRow, int(t / rowH));
		var toIndex = Math.min(maxRow, int((t + h) / rowH));
		for (var i = fromIndex; i <= toIndex; i++)
			drawUIText(fontStyle, 0, i * rowH, rows[i]);
	}
};
