//
// $Id$
//

global.KStatusBarArgsFormat =
	[
			%[ key: "name", defaultValue: "" ]
	];

global.KStatusBarWidgetStyleDefinition = [
	[ "textAlign", "textAlign", ALIGN_LEFT ]
];


/**----------------------------------------------------------------------
 * ステータスバー
 ----------------------------------------------------------------------*/
class KStatusBar extends KEntity
{
	var _defaultLabel;
	var _label;

	/*------------------------------
	 * コンストラクタ
	 *
	 * @param win ウィンドウ
	 * @param name 名前
	 ------------------------------*/
	function KStatusBar(win, *) {
		var opts = parseOldStyleWidgetArgs(KStatusBarArgsFormat, *);
		// 親クラス呼び出し
		super.KEntity(win, opts);

		addWidgetStyleDefinition(KStatusBarWidgetStyleDefinition);

		_label = "";
		_defaultLabel = getOption("defaultLabel", "");

		maxWidth = K_WIDGET_MAX_POSSIBLE_WIDTH;
	}

	/**------------------------------
	 * デフォルトラベルの値
	 *
	 * @return デフォルトラベルの値
	 * @param v 新規のデフォルトラベルの値
	 ------------------------------*/
	property defaultLabel {
		getter {
			return _defaultLabel;
		}

		setter(v) {
			// 内容が更新されている時だけ処理
			if (_defaultLabel == v)
				return;
			// 値を更新
			_defaultLabel = v;
			// 再描画
			redrawContents();
		}
	}

	/**------------------------------
	 * ラベルの値
	 *
	 * @return ラベルの値
	 * @param v 新規のラベルの値
	 ------------------------------*/
	property label {
		getter {
			return _label;
		}

		setter(v) {
			// 内容が更新されている時だけ処理
			if (_label == v)
				return;
			// 値を更新
			_label = v;
			// 再描画
			redrawContents();
		}
	}

	function onParentModified(parent) {
		if (parent !== void) {
			if (window._statusBar === void)
				window._statusBar = this;
		} else {
			if (window._statusBar === this)
				window._statusBar = void;
		}
	}

	function onDrawContents() {
		var h = fontStyle.fontHeight + borderPaddingHeight;
		setMinMaxSize(1, h, maxWidth, h);
		var text = label.length ? label : defaultLabel;
		drawBorder(borderStyle, 0, 0, width, height);
		drawUITextInRange(fontStyle, borderPaddingLeft, borderPaddingTop, width - borderPaddingWidth, text, widgetStyle.textAlign);
	}
}
