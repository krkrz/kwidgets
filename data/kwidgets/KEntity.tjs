/*------------------------------
 * 表示要素を持つエンティティの基底クラス
------------------------------*/
class KEntity extends KWidget
{
	var isDrawing = false;

	function KEntity(win, style) {
		super.KWidget(...);
	}

	function invalidateEntityStyle() {
		onEntityStyleModified();
		redrawContents();
	}

	function onStyleModified() {
		redrawContents();
	}

	function onSizeModified() {
		redrawContents();
	}

	function onChildMinMaxSizeModified() {
		// 子のサイズ更新はトラップしない
	}

	function redrawContents() {
		if (! respondToStyleModification
			 || ! isAttachedToWindow) {
			styleModified = true;
			return;
		}
		if (isDrawing)
			return;
		isDrawing = true;
		onDrawContents();
		isDrawing = false;
	}

	function onDrawContents() {
	}
}


/*------------------------------
 * 値持ちのエンティティ
------------------------------*/
class KValueEntity extends KEntity
{
	var dictKey;

	function KValueEntity() {
		super.KEntity(...);
		_allowChildDictionaryRegistration = false;
	}

	/*------------------------------
	 * 保存に適した名前を持っているか？
	 ------------------------------*/
	property hasEffectiveName {
		getter {
			return name !== void
				&& name !== ""
				&& name.substr(0, 1) != "_";
		}
	}

	/**------------------------------
	 * イベントを発生させ強制的に現在の値を通知する。
	 *
	 * 現在の値で onValueModifiedを呼びます。
	 ------------------------------*/
	function dispatch {
		if (nodeEnabled)
			onValueModified(value, value);
	}

	function invalidateValue() {
		dispatch();
	}

	function updateValue(newValue) {
		if (value !== newValue) {
			var oldValue = value;
			value = newValue;
			if (nodeEnabled)
				onValueModified(newValue, oldValue);
		}
	}

	/*------------------------------
	 * 永続化辞書を値にバインドする
	 ------------------------------*/
	function onBindPersistentDictionary(dict) {
		if ( ! hasEffectiveName)
			return;
		dictKey = window.name + "_" + name;
		value = dict.init(dictKey, value);
	}

	function onUnbindPersistentDictionary(dict) {
		if ( ! hasEffectiveName)
			return;
		dict.set(dictKey, value);
	}
}
