○kwidgets表組みウィジェット実装案・要求仕様概要
2013/08/02 M2岡田


○仕様の概要
Explorerで「詳細」表示をした時に表示される表組み表示と同じような挙動をしてくれるクラス。

必須仕様としては
・KVirtualWidgetを使って実装
・複数のタイプのアイテムを表示できる（文字列、日付、ファイルサイズなど）。タイプは拡張可能。
・Explorerのようにヘッダ部で、列の仕切りをＤ＆Ｄすることで、各列の表示サイズを可変に。
・ヘッダを右クリックしたコンテキストメニューで、列ごとの表示・非表示の切り替えを可能に。
・ヘッダをクリックすることで、列ごと基準に昇順・降順にソートする機能

なるべくあった方がよい仕様は
・行を1単位として見た、kwidgets標準ドラッグ＆ドロップオペレーションへの対応。
・複数行の選択・非選択切り替え機能。

あると望ましい仕様は
・文字列タイプの項などは、KListのようにその場リネームが可能になっているとよい。
・列サイズの自動調整機能（Explorerでヘッダ行を右クリックした時にコンテキストメニューに表示されるやつ）

なくてもいいがあると嬉しい仕様は
・ヘッダ行の列項目のＤ＆Ｄで列の順番を入れ替える機能
・列ごとの条件指定により表示する行を制限する機能(Exloprerで、ヘッダ行の各列項目の右側の▼をクリックすると表示されるチェックの機能。


○実装イメージ
KTable クラスでテーブルを定義。
このクラス自体はアイテムの追加によって横にも縦にも際限なくサイズが可変するので、KScrollLayoutに突っ込んで使うのが大前提。

KTableRowSpec クラスで、各列の挙動を定義する。
テキスト、日付、ファイルサイズなど基本的な実装については KTableRowSpec 派生で、 KTableRowSpecText, KTableRowSpecDateTime, KTableRowSpecFilesize などが最初から用意されている。
列の名前は特定の「ラベル」で識別する。

KTableColumn で各行の内容を定義。その行の中の、各列の値を辞書配列の形で保持する。

具体的なコードのイメージは以下のようになる。

ex)
var table = KTable(window, 
		[ new KTableRowSpecText("名前", "filename"),
	  	new KTableRowSpecDateTime("更新日時", "mtime"),
	  	new KTableRowSpecText("種類", "type"),
	  	new KTableRowSpecFilesize("サイズ", "size") ],
		"table");
table.add(new KTableColumn(%[ filename: "readme.txt", mtime: 3129090231, type: "テキストファイル", size: 32912 ]));
table.add(new KTableColumn(%[ filename: "sample.exe", mtime: 3128312932, type: "実行ファイル", size: 45299191 ]));
table.add(new KTableColumn(%[ filename: "tmp", mtime: 3219832192, type: "フォルダ", size: void ]));


○クラスのざっくりした概要：KTable
KVirtualWidget派生クラス。
KTableRowSpecで定義された各列の特性に応じて、KTableColumnの各項の内容を表示する。
各列の表示幅、表示順の情報などはこいつが覚えておいて、永続化辞書に保存できるようにしておく。
マウス入力やキー入力などは適宜、個別のKTableColumnにフォワードする。
KList拡張案に習って、focus()とselect()は別概念として考え、最初からマルチプルセレクション前提で作る。

○クラスのざっくりした概要：KTableRowSpec
各列の「挙動」を定義するクラス…のさらにインターフェースのみ定義する基底クラス。
それ自体は「値」を持たず、KTableColumnの持っている「値」を、このクラスを通すことで実際に表示する際に整形するイメージ。
以下のような関数を共通インターフェスとして持っているとよいと思われる。
・「値」を受け取って、最大表示幅を返す関数
・「値」を受け取って、最小表示幅を返す関数（不要？？）
・「値」と「表示幅」を受け取って、実際の描画を行う関数。
・「値」を２つ受け取って、その大小を比較する関数


○クラスのざっくりした概要：KTableColumn
実際に行ごとの値を保持するクラス。
また、マウスオペレーション、キーボードフォーカス、ドラッグ＆ドロップなどもこの単位で受け取るようになる。
KListに対するKListItemのようなイメージが近い。





○使いたい用途
表計算ソフト、Excel的な使い道をしたい？
項目を多数ずらっと並べて入力したい
特定の項目が配列化出来ると嬉しい。
（組み込みの機能として配列化出来るようになっていて、任意の入力項目を指定一発で配列化できる）
縦にD&Dで行項目入れ替え
横にD&Dで配列項目の要素入れ替え
列タブをクリックして行のソート
列タブをD&Dして、列の並び順番入れ替え
列タブは常に表示されていないといけない……

○必要な機能
KVirtualWidgetで実装することで高速化



・実装手順
○ 1) Timelineを参考にカラムタブ、ビューがちゃんと表示されて適切にスクロール出来るところまで
○ 2) KTableColumn(Text), KTableRowを実装して、その内容が適切に表示されるところまで。
○ 3) カラムタブの長さをD&Dで調整して、表示内容を変更できるところまで
○4) カラムタブをD&Dして位置を入れ替えるところまで
5) カラムタブをクリックしてソート出来るところまで
6) セルの内容を編集するところまで（テキスト編集）
7) ローをD&Dして位置入れ替えるところまで。
8) セルの配列化まで
9) 配列化されたセルをD&Dして位置を入れ替えるところまで。


